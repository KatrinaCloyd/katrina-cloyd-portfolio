/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./data/data.js":
/*!**********************!*\
  !*** ./data/data.js ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* module decorator */ module = __webpack_require__.hmd(module);\nvar work = [{\n  id: 'devGIM',\n  title: 'GIM LCC.',\n  oneLiner: 'GIM LLC is an escape room inspired website where players work together to find clues to free the ghost!',\n  note: null,\n  tech: 'JavaScript | React | Socket.io | Context Api | Node | Express',\n  github: 'https://github.com/GIM-LLC',\n  liveSite: 'https://www.escapegim.com/',\n  npmLink: null,\n  blurb1: 'Created by a remote team of five over an eight day sprint. Inspired by escape rooms and ghost stories, GIM (or the Ghost In the Machine) appears to be an innocuous corporate website, but as users explore they find clues about what is actually happening. Built using Socket.io, the initial idea was that the site would host multiple visitors at the same time, so that users could interact and work together to free the ghost before time ran out, and the ghost gets trapped forever. Users can chat with one another, see what other users are doing, and work together! The ghost can be freed on your own, but it is much more difficult.',\n  blurb2: 'Our first hurdle with this project was getting multiple cursors to render on the screen at once and update with each and every mouse move for all users. Once we got that functionality figured out over the socket connections, all other interactions were fun to figure out!',\n  blurb3: 'This project was really an adventure in CSS animations. Images degrade over time, clues glow, sound effects, shake animations, and modal windows let you know you are making progress, elements flip, move, and dissapear. Explore for yourself to see if you can find all the surprises and free the ghost!',\n  video: '/GIM.mp4',\n  image1: '/GIM.png',\n  image2: '/GIM2.png',\n  image3: '/GIM3.png',\n  image4: '/GIM4.png'\n}, {\n  id: 'devPP',\n  title: 'Pixel Pusher',\n  oneLiner: 'Published NPM package to create unique art right in the terminal window! Users can also save, upload and view artwork in the gallery.',\n  note: null,\n  tech: 'JavaScript | Node | Express | GitHub OAuth | Axios | Inquirer | Blessed',\n  github: 'https://github.com/st-ART-up',\n  liveSite: null,\n  npmLink: 'https://www.npmjs.com/package/@st-art-up/pixel-pusher',\n  blurb1: 'PixelPusher by stARTup creates a canvas and gallery experience right in the users terminal window by simply running the command. In the canvas view users can change the canvas color, paint color, brush sizes, erase, and even add text (a poem, maybe?) to their creations. Using GitHub oAuth, users can save and upload their completed art to be viewed in the gallery. When in gallery view users can manage their own artworks or view artworks created by all other PixelPushers!',\n  blurb2: 'Created by a fully remote team of eight developers, this app was a completely new undertaking for everyone on the team. The biggest challenge was navigating how to integrate two very different libraries within node to run in the terminal window.',\n  blurb3: 'This project was so fun to be a part of, being able to bring art and tech together in the terminal window was an adventure. We look forward to seeing your artworks in the gallery collection!',\n  video: '/PPvid.mp4',\n  image1: '/PP1.png',\n  image2: '/PP2.png',\n  image3: '/PP3.png',\n  image4: null\n}, {\n  id: 'devGG',\n  title: 'GainfulGarden',\n  oneLiner: 'Gardening site for users to search for new plants, and track their garden info. Live site under construction, as our source API was discontinued.',\n  note: null,\n  tech: 'JavaScript | React | Node | Express | Superagent | Toastify',\n  github: 'https://github.com/GainfulGarden',\n  liveSite: 'https://gainfulgarden.netlify.app/',\n  npmLink: null,\n  blurb1: 'GainfulGarden is a place for gardners new and seasoned alike to search for new plants to add to their gardens, keep a wishlist of plants that would like to grow, and keep detailed notes on the plants they are already growing. Both front and back ends for this app were built by a fully remote team of four in one week. Our back end has three relational tables: user information, wishlist items and garden items both which include an owner id to tie the item to the appropriate user, and lastly notes which carries a owner id and a plant id so the note is tied to the correct plant in the correct users garden.',\n  blurb2: 'After narrowing down the search results by name, edible part, required light or whether it is a vegetable or not, users then get an updated list of plant results. From this matrix users can add the plant directly into their garden or wishlist by clicking on the icons on the card, or they can view a detail page. The detail page calls the plant API once again to get the most detailed info available, including water and light requirement details, genius name, soil needs, and additional photos.',\n  blurb3: 'I designed the branding and look of the entire frontend, personally styling the search reslts page as a sort of roadmap so other team members could take on other pages while maintaining a seamless look across the site. Sadly this app was built on information from the Trefle API, which has since been taken down. The team loves GainfulGarden so much that we do have plans to build out our own API to power the backend. So check back soon!',\n  video: null,\n  image1: '/GG1.png',\n  image2: null,\n  image3: '/GG2.png',\n  image4: null\n}, {\n  id: 'devVM',\n  title: 'Vampire Match',\n  oneLiner: 'Memory card match game based on the movie and television series ',\n  note: 'What We Do In The Shadows.',\n  tech: 'JavaScript | HTML | CSS | QUnit',\n  github: 'https://github.com/UniKittyCorns/MemoryCardGame',\n  liveSite: 'https://vampirematch.netlify.app/',\n  npmLink: null,\n  blurb1: 'A memory matching card game created with vanilla javascript, HTML, and CSS. This vampire themed game is a homage to the movie and series What We Do In The Shadows. This app was completed in a five day sprint by a remote team  of four working collaboratively.',\n  blurb2: 'Users are asked to input their name and select one of the three difficulty levels. This info is saved using the browser\\'s local storage for display and for determining the number of cards in the game. A fun challenge was utilizing CSS transform and rotate animations for the card flips.',\n  blurb3: 'User\\'s scores are also added to the local storage info in order to feed the scoreboard page. Because we were so proud of these awesome illustrations, we had to build in a \\\"give up\\\" functionality so that even if you can\\'t beat the hardest level, you can still see all of the cards face up! Illustration credit to Soraya Benson, you can find her on the GitHub link above.',\n  video: '/VampVid.mp4',\n  image1: '/Vamp1.png',\n  image2: '/Vamp2.png',\n  image3: '/Vamp3.png',\n  image4: '/Vamp4.png'\n}];\n/* harmony default export */ __webpack_exports__[\"default\"] = (work);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./data/data.js\n");

/***/ })

});